parameter (or (or (int %bid) (or (unit %cancelAuction) (map %openAuction nat int))) (or (unit %sorting) (or (address %transferOwnership) (map %updateCTRs nat int))));
storage   (pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))));
code
  {
    # Global variable: closeAuction # pair @parameter @storage
    LAMBDA
      (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))
      (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
      {
        # __operations__ = sp.local("__operations__", sp.list([]), sp.TList(sp.TOperation)) # pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        NIL operation; # list operation : pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        SWAP;       # pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        # __storage__ = sp.local("__storage__", lparams_0.in_storage, sp.TRecord(agents = sp.TMap(sp.TNat, sp.TAddress), bids = sp.TMap(sp.TNat, sp.TInt), ctrs = sp.TMap(sp.TNat, sp.TIntOrNat), isOpen = sp.TBool, owner = sp.TAddress, prices = sp.TMap(sp.TNat, sp.TInt)).layout((("agents", ("bids", "ctrs")), ("isOpen", ("owner", "prices"))))) # pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        CDR;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        # if sp.len(self.data.bids) > 0: # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        CADAR;      # map nat int : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        SIZE;       # nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        PUSH nat 0; # nat : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        COMPARE;    # int : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        LT;         # bool : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        IF
          {
            # lenctr = sp.local("lenctr", sp.len(self.data.ctrs)) # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            CADDR;      # map nat int : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            SIZE;       # nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            # self.data.ctrs[lenctr.value] = 0 # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CDR;        # pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DUP;        # pair (map %bids nat int) (map %ctrs nat int) : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # map nat int : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # pair (map %bids nat int) (map %ctrs nat int) : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CDR;        # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DIG 4;      # nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            DUP;        # nat : nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            DUG 5;      # nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            PUSH (option int) (Some 0); # option int : nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # nat : option int : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            UPDATE;     # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            PAIR;       # pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            SWAP;       # nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            # i = sp.local("i", 0) # nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            PUSH nat 0; # nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            # jc = sp.local("jc", 0) # nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            PUSH nat 0; # nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            # price_i = sp.local("price_i", 0) # nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            PUSH int 0; # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            # while (i.value < lenctr.value) & (i.value < sp.len(self.data.bids)) : ... # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DIG 3;      # nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DUP;        # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DUG 4;      # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DIG 3;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DUG 4;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            IF
              {
                DIG 4;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                DUG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                CADAR;      # map nat int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                SIZE;       # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DIG 3;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUG 4;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
              }
              {
                PUSH bool False; # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
              }; # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            LOOP
              {
                DROP 2;     # nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                # price_i.value = 0 # nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                PUSH int 0; # int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                # jc.value = i.value + sp.as_nat(1) # int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                PUSH int 1; # int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                ISNAT;      # option nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                IF_SOME
                  {}
                  {
                    PUSH int 103; # int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DIG 2;      # nat : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUP;        # nat : nat : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUG 3;      # nat : @some : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                ADD;        # nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                SWAP;       # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                # while jc.value < (lenctr.value + 1) : ... # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                PUSH nat 1; # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DIG 4;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUG 5;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                ADD;        # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DIG 2;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DUG 3;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                LOOP
                  {
                    # price_i.value += self.data.bids[jc.value] * (self.data.ctrs[sp.as_nat((sp.to_int(jc.value)) - 1)] - self.data.ctrs[jc.value]) # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 4;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                    DUG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    CADDR;      # map nat int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 2;      # nat : map nat int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUP;        # nat : nat : map nat int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUG 3;      # nat : map nat int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    GET;        # option int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    IF_SOME
                      {
                        # of_some: Get-item:112 # @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                      }
                      {
                        PUSH int 112; # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                        FAILWITH;   # FAILED
                      }; # @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : @some : int : nat : nat : nat : list operation
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : @some : int : nat : nat : nat : list operation
                    DUG 6;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    CADDR;      # map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    PUSH int 1; # int : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 4;      # nat : int : map nat int : @some : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUP;        # nat : nat : int : map nat int : @some : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUG 5;      # nat : int : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    INT;        # int : int : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    SUB;        # int : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    ISNAT;      # option nat : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    IF_SOME
                      {}
                      {
                        PUSH int 112; # int : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                        FAILWITH;   # FAILED
                      }; # @some : map nat int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    GET;        # option int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    IF_SOME
                      {
                        # of_some: Get-item:112 # @some : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                      }
                      {
                        PUSH int 112; # int : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                        FAILWITH;   # FAILED
                      }; # @some : @some : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    SUB;        # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : int : nat : nat : nat : list operation
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : int : nat : nat : nat : list operation
                    DUG 6;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    CADAR;      # map nat int : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 3;      # nat : map nat int : int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUP;        # nat : nat : map nat int : int : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUG 4;      # nat : map nat int : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    GET;        # option int : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    IF_SOME
                      {
                        # of_some: Get-item:112 # @some : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                      }
                      {
                        PUSH int 112; # int : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                        FAILWITH;   # FAILED
                      }; # @some : int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    MUL;        # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    ADD;        # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    # jc.value += 1 # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    PUSH nat 1; # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 2;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    ADD;        # nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    SWAP;       # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    # check for next loop: jc.value < (lenctr.value + 1) # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    PUSH nat 1; # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 4;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUG 5;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    ADD;        # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DIG 2;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    DUG 3;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                    LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                  }; # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                # self.data.prices[i.value] = price_i.value # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
                DIG 4;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : int : nat : nat : nat : list operation
                SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                DUP;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                CAR;        # bool : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                CDR;        # pair (address %owner) (map %prices nat int) : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                DUP;        # pair (address %owner) (map %prices nat int) : pair (address %owner) (map %prices nat int) : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                CAR;        # address : pair (address %owner) (map %prices nat int) : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # pair (address %owner) (map %prices nat int) : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                CDR;        # map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                DIG 6;      # nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : list operation
                DUP;        # nat : nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : list operation
                DUG 7;      # nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                DIG 5;      # int : nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : nat : nat : nat : list operation
                DUP;        # int : int : nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : nat : nat : nat : list operation
                DUG 6;      # int : nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SOME;       # option int : nat : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # nat : option int : map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                UPDATE;     # map nat int : address : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # address : map nat int : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                PAIR;       # pair address (map nat int) : bool : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # bool : pair address (map nat int) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                PAIR;       # pair bool (pair address (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : int : nat : nat : nat : list operation
                SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : int : nat : nat : nat : list operation
                PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : int : nat : nat : nat : list operation
                DUG 4;      # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                # i.value += 1 # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                PUSH nat 1; # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DIG 3;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                ADD;        # nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DUG 2;      # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                # check for next loop: (i.value < lenctr.value) & (i.value < sp.len(self.data.bids)) # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DIG 3;      # nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DUP;        # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DUG 4;      # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DIG 3;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                DUG 4;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                IF
                  {
                    DIG 4;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : int : nat : nat : nat : list operation
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : int : nat : nat : nat : list operation
                    DUG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    CADAR;      # map nat int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    SIZE;       # nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    DIG 3;      # nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    DUP;        # nat : nat : nat : int : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    DUG 4;      # nat : nat : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    COMPARE;    # int : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                    LT;         # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                  }
                  {
                    PUSH bool False; # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
                  }; # bool : int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : list operation
              }; # int : nat : nat : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            DROP 3;     # nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            # del self.data.ctrs[lenctr.value] # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat : list operation
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # map nat address : pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CDR;        # pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DUP;        # pair (map nat int) (map nat int) : pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CAR;        # map nat int : pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            SWAP;       # pair (map nat int) (map nat int) : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            CDR;        # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            NONE int;   # option int : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : list operation
            DIG 5;      # nat : option int : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            UPDATE;     # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            SWAP;       # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            PAIR;       # pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            SWAP;       # map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : list operation
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
          }
          {}; # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        UNIT;       # unit : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        # sp.result(sp.record(operations = sp.operations(), result = __s1.value, storage = self.data)) # unit : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation
        PAIR %result %storage; # pair (unit %result) (pair %storage (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        SWAP;       # list operation : pair (unit %result) (pair %storage (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        PAIR %operations; # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))
      }; # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    # Global variable: insertSort # pair @parameter @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    LAMBDA
      (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))
      (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
      {
        # __operations__ = sp.local("__operations__", sp.list([]), sp.TList(sp.TOperation)) # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        NIL operation; # list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        SWAP;       # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        # __storage__ = sp.local("__storage__", lparams_1.in_storage, sp.TRecord(agents = sp.TMap(sp.TNat, sp.TAddress), bids = sp.TMap(sp.TNat, sp.TInt), ctrs = sp.TMap(sp.TNat, sp.TIntOrNat), isOpen = sp.TBool, owner = sp.TAddress, prices = sp.TMap(sp.TNat, sp.TInt)).layout((("agents", ("bids", "ctrs")), ("isOpen", ("owner", "prices"))))) # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        DUP;        # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation
        DUG 2;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        CDR;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        # self.data.isOpen = False # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        CDDR;       # pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        PUSH bool False; # bool : pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        PAIR;       # pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        PAIR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        # jx = sp.local("jx", lparams_1.in_param) # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DIG 2;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        DUP;        # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        DUG 3;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        CAR;        # nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        # jint = sp.local("jint", sp.to_int(lparams_1.in_param)) # nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DIG 3;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        DUP;        # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        DUG 4;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        CAR;        # nat : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        INT;        # int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        # while (sp.as_nat(jint.value) > 0) & (self.data.bids[sp.as_nat(jint.value)] >= self.data.bids[sp.as_nat(jint.value - 1)]) : ... # int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DUP;        # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        ISNAT;      # option nat : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        IF_SOME
          {}
          {
            PUSH int 85; # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            FAILWITH;   # FAILED
          }; # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        PUSH nat 0; # nat : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        COMPARE;    # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        LT;         # bool : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        IF
          {
            DIG 2;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 3;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CADAR;      # map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 2;      # int : int : map nat int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : int : map nat int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 3;      # int : int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:88 # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 88; # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 3;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 4;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CADAR;      # map nat int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 2;      # int : map nat int : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : map nat int : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 3;      # int : map nat int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:88 # @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 88; # int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            COMPARE;    # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GE;         # bool : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
          }
          {
            PUSH bool False; # bool : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
          }; # bool : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        LOOP
          {
            # tempBid = sp.local("tempBid", self.data.bids[sp.as_nat(jint.value)]) # int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 2;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 3;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CADAR;      # map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # int : map nat int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : map nat int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 2;      # int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:77 # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 77; # int : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # tempAgent = sp.local("tempAgent", self.data.agents[sp.as_nat(jint.value)]) # @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 3;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 4;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAAR;       # map nat address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 2;      # int : map nat address : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : map nat address : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 3;      # int : map nat address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option address : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:78 # @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 78; # int : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # self.data.bids[sp.as_nat(jint.value)] = self.data.bids[sp.as_nat(jint.value - 1)] # @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 4;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 5;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map %bids nat int) (map %ctrs nat int) : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # map nat int : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map %bids nat int) (map %ctrs nat int) : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 6;      # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 7;      # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 9;      # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CADAR;      # map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 9;      # int : int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 10;     # int : int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:79 # @some : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 79; # int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SOME;       # option int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # @some : option int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            UPDATE;     # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # self.data.agents[sp.as_nat(jint.value)] = self.data.agents[sp.as_nat(jint.value - 1)] # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 5;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair (map nat int) (map nat int) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 5;      # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 6;      # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 8;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAAR;       # map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 8;      # int : int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 9;      # int : int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            GET;        # option address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {
                # of_some: Get-item:80 # @some : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH int 80; # int : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SOME;       # option address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # @some : option address : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            UPDATE;     # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # self.data.bids[sp.as_nat(jint.value - 1)] = tempBid.value # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat address : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map nat int) (map nat int) : pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # map nat int : pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map nat int) (map nat int) : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 7;      # int : int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 8;      # int : int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 6;      # @some : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SOME;       # option int : @some : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # @some : option int : map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            UPDATE;     # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # self.data.agents[sp.as_nat(jint.value - 1)] = tempAgent.value # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CDR;        # pair (map nat int) (map nat int) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            CAR;        # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 5;      # int : int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 6;      # int : int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DIG 4;      # @some : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SOME;       # option address : @some : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # @some : option address : map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            UPDATE;     # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int)) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUG 2;      # int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # jint.value -= 1 # int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH int 1; # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SWAP;       # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            SUB;        # int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            # check for next loop: (sp.as_nat(jint.value) > 0) & (self.data.bids[sp.as_nat(jint.value)] >= self.data.bids[sp.as_nat(jint.value - 1)]) # int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            DUP;        # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            ISNAT;      # option nat : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF_SOME
              {}
              {
                PUSH int 85; # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                FAILWITH;   # FAILED
              }; # @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            PUSH nat 0; # nat : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            COMPARE;    # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            LT;         # bool : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
            IF
              {
                DIG 2;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUG 3;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                CADAR;      # map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                PUSH int 1; # int : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DIG 2;      # int : int : map nat int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUP;        # int : int : int : map nat int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUG 3;      # int : int : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                SUB;        # int : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                ISNAT;      # option nat : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                IF_SOME
                  {}
                  {
                    PUSH int 85; # int : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                    FAILWITH;   # FAILED
                  }; # @some : map nat int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                GET;        # option int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                IF_SOME
                  {
                    # of_some: Get-item:88 # @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                  }
                  {
                    PUSH int 88; # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                    FAILWITH;   # FAILED
                  }; # @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DIG 3;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUG 4;      # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                CADAR;      # map nat int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DIG 2;      # int : map nat int : @some : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUP;        # int : int : map nat int : @some : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                DUG 3;      # int : map nat int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                ISNAT;      # option nat : map nat int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                IF_SOME
                  {}
                  {
                    PUSH int 85; # int : map nat int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                    FAILWITH;   # FAILED
                  }; # @some : map nat int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                GET;        # option int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                IF_SOME
                  {
                    # of_some: Get-item:88 # @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                  }
                  {
                    PUSH int 88; # int : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                    FAILWITH;   # FAILED
                  }; # @some : @some : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                COMPARE;    # int : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
                GE;         # bool : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }
              {
                PUSH bool False; # bool : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
              }; # bool : int : nat : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
          }; # int : nat : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DROP 2;     # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation : pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
        DIG 2;      # pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        DROP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        UNIT;       # unit : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        # sp.result(sp.record(operations = sp.operations(), result = __s2.value, storage = self.data)) # unit : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : list operation
        PAIR %result %storage; # pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))) : list operation
        SWAP;       # list operation : pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))))
        PAIR %operations; # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))))
      }; # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair @parameter @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    SWAP;       # pair @parameter @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    DUP;        # pair @parameter @storage : pair @parameter @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    CDR;        # @storage : pair @parameter @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    SWAP;       # pair @parameter @storage : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    CAR;        # @parameter : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
    IF_LEFT
      {
        DIG 2;      # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : @parameter.left : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
        DROP;       # @parameter.left : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
        DIG 2;      # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : @parameter.left : @storage
        DROP;       # @parameter.left : @storage
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%bid
            # == bid ==
            # l = sp.local("l", sp.len(self.data.bids)) # @storage : @parameter%bid
            DUP;        # @storage : @storage : @parameter%bid
            DUG 2;      # @storage : @parameter%bid : @storage
            CADAR;      # map nat int : @parameter%bid : @storage
            SIZE;       # nat : @parameter%bid : @storage
            # self.data.bids[l.value] = params # nat : @parameter%bid : @storage
            DIG 2;      # @storage : nat : @parameter%bid
            DUP;        # @storage : @storage : nat : @parameter%bid
            CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @storage : nat : @parameter%bid
            SWAP;       # @storage : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            CDR;        # pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            DUP;        # pair (map %bids nat int) (map %ctrs nat int) : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            CDR;        # map nat int : pair (map %bids nat int) (map %ctrs nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            SWAP;       # pair (map %bids nat int) (map %ctrs nat int) : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            CAR;        # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            DIG 4;      # nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%bid
            DUP;        # nat : nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%bid
            DUG 5;      # nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat : @parameter%bid
            DIG 6;      # @parameter%bid : nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            SOME;       # option int : nat : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            SWAP;       # nat : option int : map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            UPDATE;     # map nat int : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            PAIR;       # pair (map nat int) (map nat int) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            SWAP;       # map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat
            # self.data.agents[l.value] = sp.sender # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat
            DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat
            CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : nat
            SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            CDR;        # pair (map nat int) (map nat int) : pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            CAR;        # map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : nat
            DIG 3;      # nat : map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            SENDER;     # address : nat : map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            SOME;       # option address : nat : map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            SWAP;       # nat : option address : map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            UPDATE;     # map nat address : pair (map nat int) (map nat int) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
            PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
          }
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == cancelAuction ==
                # sp.verify(sp.sender == self.data.owner) # @storage
                DUP;        # @storage : @storage
                CDDAR;      # address : @storage
                SENDER;     # address : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # if self.data.isOpen: # @storage
                DUP;        # @storage : @storage
                CDAR;       # bool : @storage
                IF
                  {
                    # self.data.isOpen = False # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @storage
                    SWAP;       # @storage : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                    CDDR;       # pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                    PUSH bool False; # bool : pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                    PAIR;       # pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    # self.data.bids = {} # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int))
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    CDDR;       # map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    EMPTY_MAP nat int; # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    SWAP;       # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    # self.data.agents = {} # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int))
                    CADR;       # pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int))
                    EMPTY_MAP nat address; # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    # self.data.ctrs = {} # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                    SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair bool (pair (address %owner) (map %prices nat int))
                    CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    CAR;        # map nat address : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    CDAR;       # map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    EMPTY_MAP nat int; # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    SWAP;       # map nat int : map nat int : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat int) (map nat int) : map nat address : pair bool (pair (address %owner) (map %prices nat int))
                    SWAP;       # map nat address : pair (map nat int) (map nat int) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
                  }
                  {}; # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
              }
              {
                SWAP;       # @storage : @parameter%openAuction
                # == openAuction ==
                # sp.verify(sp.sender == self.data.owner) # @storage : @parameter%openAuction
                DUP;        # @storage : @storage : @parameter%openAuction
                DUG 2;      # @storage : @parameter%openAuction : @storage
                CDDAR;      # address : @parameter%openAuction : @storage
                SENDER;     # address : address : @parameter%openAuction : @storage
                COMPARE;    # int : @parameter%openAuction : @storage
                EQ;         # bool : @parameter%openAuction : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @parameter%openAuction : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%openAuction : @storage
                # if self.data.isOpen == False: # @parameter%openAuction : @storage
                PUSH bool False; # bool : @parameter%openAuction : @storage
                DIG 2;      # @storage : bool : @parameter%openAuction
                DUP;        # @storage : @storage : bool : @parameter%openAuction
                DUG 3;      # @storage : bool : @parameter%openAuction : @storage
                CDAR;       # bool : bool : @parameter%openAuction : @storage
                COMPARE;    # int : @parameter%openAuction : @storage
                EQ;         # bool : @parameter%openAuction : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%openAuction
                    # self.data.isOpen = True # @storage : @parameter%openAuction
                    DUP;        # @storage : @storage : @parameter%openAuction
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @storage : @parameter%openAuction
                    SWAP;       # @storage : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    CDDR;       # pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    PUSH bool True; # bool : pair (address %owner) (map %prices nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    PAIR;       # pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : @parameter%openAuction
                    PAIR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @parameter%openAuction
                    # self.data.prices = {} # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @parameter%openAuction
                    DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @parameter%openAuction
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : @parameter%openAuction
                    SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair (address %owner) (map %prices nat int))) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    CDR;        # pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    DUP;        # pair bool (pair (address %owner) (map %prices nat int)) : pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    CAR;        # bool : pair bool (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    SWAP;       # pair bool (pair (address %owner) (map %prices nat int)) : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    CDAR;       # address : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    EMPTY_MAP nat int; # map nat int : address : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    SWAP;       # address : map nat int : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    PAIR;       # pair address (map nat int) : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    SWAP;       # bool : pair address (map nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    PAIR;       # pair bool (pair address (map nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%openAuction
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    # self.data.bids = {} # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    DUP;        # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    CDR;        # pair bool (pair address (map nat int)) : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    SWAP;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair address (map nat int))) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CDDR;       # map nat int : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    EMPTY_MAP nat int; # map nat int : map nat int : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (map nat int) (map nat int) : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    SWAP;       # map nat address : pair (map nat int) (map nat int) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    # self.data.agents = {} # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    CDR;        # pair bool (pair address (map nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CADR;       # pair (map nat int) (map nat int) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    EMPTY_MAP nat address; # map nat address : pair (map nat int) (map nat int) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    # self.data.ctrs = params # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    DUP;        # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    CDR;        # pair bool (pair address (map nat int)) : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : @parameter%openAuction
                    SWAP;       # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair address (map nat int))) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CAR;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    DUP;        # pair (map nat address) (pair (map nat int) (map nat int)) : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CAR;        # map nat address : pair (map nat address) (pair (map nat int) (map nat int)) : pair bool (pair address (map nat int)) : @parameter%openAuction
                    SWAP;       # pair (map nat address) (pair (map nat int) (map nat int)) : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    CDAR;       # map nat int : map nat address : pair bool (pair address (map nat int)) : @parameter%openAuction
                    DIG 3;      # @parameter%openAuction : map nat int : map nat address : pair bool (pair address (map nat int))
                    SWAP;       # map nat int : @parameter%openAuction : map nat address : pair bool (pair address (map nat int))
                    PAIR;       # pair (map nat int) @parameter%openAuction : map nat address : pair bool (pair address (map nat int))
                    SWAP;       # map nat address : pair (map nat int) @parameter%openAuction : pair bool (pair address (map nat int))
                    PAIR;       # pair (map nat address) (pair (map nat int) @parameter%openAuction) : pair bool (pair address (map nat int))
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) @parameter%openAuction)) (pair bool (pair address (map nat int)))
                  }
                  {
                    DROP;       # @storage
                  }; # pair (pair (map nat address) (pair (map nat int) @parameter%openAuction)) (pair bool (pair address (map nat int)))
              }; # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair bool (pair (address %owner) (map %prices nat int)))
          }; # pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
        NIL operation; # list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # == sorting ==
            # sp.verify(sp.sender == self.data.owner) # @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # @storage : @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUG 2;      # @storage : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            CDDAR;      # address : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SENDER;     # address : address : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            COMPARE;    # int : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            EQ;         # bool : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            IF
              {}
              {
                PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                FAILWITH;   # FAILED
              }; # @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SWAP;       # @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # l = sp.local("l", sp.len(self.data.bids)) # @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # @storage : @storage : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUG 2;      # @storage : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            CADAR;      # map nat int : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SIZE;       # nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # j = sp.local("j", l.value - 1) # nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # nat : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            PUSH nat 1; # nat : nat : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SWAP;       # nat : nat : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SUB;        # int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # for x in self.data.bids.items(): ... # int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            NIL operation; # list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 4;      # @storage : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # @storage : @storage : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUG 5;      # @storage : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            CADAR;      # map nat int : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            ITER
              {
                # y3 = sp.local("y3", self.insertSort(sp.record(in_param = x.key, in_storage = self.data))) # pair nat int : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DIG 6;      # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUP;        # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUG 7;      # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DIG 6;      # @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DIG 2;      # pair nat int : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUP;        # pair nat int : pair nat int : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUG 3;      # pair nat int : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                CAR;        # nat : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                PAIR %in_param %in_storage; # pair (nat %in_param) (@storage %in_storage) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                EXEC;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                # self.data = y3.value.storage # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                CDDR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUG 6;      # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                # for op in y3.value.operations: ... # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                CAR;        # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                ITER
                  {
                    # sp.operations().push(op) # operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                    DIG 3;      # list operation : operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                    SWAP;       # operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                    CONS;       # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                    DUG 2;      # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                  }; # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair nat int : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DROP 2;     # list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
              }; # list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # y4 = sp.local("y4", self.closeAuction(sp.record(in_param = 2, in_storage = self.data))) # list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 6;      # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUG 7;      # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : @storage : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 5;      # @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            PUSH int 2; # int : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            PAIR %in_param %in_storage; # pair (int %in_param) (@storage %in_storage) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            EXEC;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # self.data = y4.value.storage # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            CDDR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUG 5;      # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            # for op in y4.value.operations: ... # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            CAR;        # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            ITER
              {
                # sp.operations().push(op) # operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                DIG 2;      # list operation : operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                SWAP;       # operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                CONS;       # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
                SWAP;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
              }; # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) : list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # list operation : int : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SWAP;       # int : list operation : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # list operation : nat : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SWAP;       # nat : list operation : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # list operation : @parameter%sorting : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            SWAP;       # @parameter%sorting : list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 2;      # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))) : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 2;      # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
            DROP;       # list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
          }
          {
            DIG 2;      # lambda (pair (nat %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : @parameter.right.right : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DROP;       # @parameter.right.right : @storage : lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))))
            DIG 2;      # lambda (pair (int %in_param) (pair %in_storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))))) : @parameter.right.right : @storage
            DROP;       # @parameter.right.right : @storage
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%transferOwnership
                # == transferOwnership ==
                # sp.verify(sp.sender == self.data.owner) # @storage : @parameter%transferOwnership
                DUP;        # @storage : @storage : @parameter%transferOwnership
                DUG 2;      # @storage : @parameter%transferOwnership : @storage
                CDDAR;      # address : @parameter%transferOwnership : @storage
                SENDER;     # address : address : @parameter%transferOwnership : @storage
                COMPARE;    # int : @parameter%transferOwnership : @storage
                EQ;         # bool : @parameter%transferOwnership : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @parameter%transferOwnership : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%transferOwnership : @storage
                SWAP;       # @storage : @parameter%transferOwnership
                # self.data.owner = params # @storage : @parameter%transferOwnership
                DUP;        # @storage : @storage : @parameter%transferOwnership
                CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @storage : @parameter%transferOwnership
                SWAP;       # @storage : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                DUP;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                CAR;        # bool : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                SWAP;       # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                CDDR;       # map nat int : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : @parameter%transferOwnership
                DIG 3;      # @parameter%transferOwnership : map nat int : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                PAIR;       # pair @parameter%transferOwnership (map nat int) : bool : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                SWAP;       # bool : pair @parameter%transferOwnership (map nat int) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                PAIR;       # pair bool (pair @parameter%transferOwnership (map nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))
                SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair bool (pair @parameter%transferOwnership (map nat int))
                PAIR;       # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair @parameter%transferOwnership (map nat int)))
              }
              {
                SWAP;       # @storage : @parameter%updateCTRs
                # == updateCTRs ==
                # sp.verify(sp.sender == self.data.owner) # @storage : @parameter%updateCTRs
                DUP;        # @storage : @storage : @parameter%updateCTRs
                DUG 2;      # @storage : @parameter%updateCTRs : @storage
                CDDAR;      # address : @parameter%updateCTRs : @storage
                SENDER;     # address : address : @parameter%updateCTRs : @storage
                COMPARE;    # int : @parameter%updateCTRs : @storage
                EQ;         # bool : @parameter%updateCTRs : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @parameter%updateCTRs : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateCTRs : @storage
                # if self.data.isOpen == False: # @parameter%updateCTRs : @storage
                PUSH bool False; # bool : @parameter%updateCTRs : @storage
                DIG 2;      # @storage : bool : @parameter%updateCTRs
                DUP;        # @storage : @storage : bool : @parameter%updateCTRs
                DUG 3;      # @storage : bool : @parameter%updateCTRs : @storage
                CDAR;       # bool : bool : @parameter%updateCTRs : @storage
                COMPARE;    # int : @parameter%updateCTRs : @storage
                EQ;         # bool : @parameter%updateCTRs : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%updateCTRs
                    # self.data.ctrs = params # @storage : @parameter%updateCTRs
                    DUP;        # @storage : @storage : @parameter%updateCTRs
                    CDR;        # pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @storage : @parameter%updateCTRs
                    SWAP;       # @storage : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    CAR;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    DUP;        # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    CAR;        # map nat address : pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    SWAP;       # pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int)) : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    CDAR;       # map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int)) : @parameter%updateCTRs
                    DIG 3;      # @parameter%updateCTRs : map nat int : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
                    SWAP;       # map nat int : @parameter%updateCTRs : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat int) @parameter%updateCTRs : map nat address : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
                    SWAP;       # map nat address : pair (map nat int) @parameter%updateCTRs : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (map nat address) (pair (map nat int) @parameter%updateCTRs) : pair (bool %isOpen) (pair (address %owner) (map %prices nat int))
                    PAIR;       # pair (pair (map nat address) (pair (map nat int) @parameter%updateCTRs)) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
                  }
                  {
                    DROP;       # @storage
                  }; # pair (pair (map nat address) (pair (map nat int) @parameter%updateCTRs)) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
              }; # pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair @parameter%transferOwnership (map nat int)))
            NIL operation; # list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair bool (pair @parameter%transferOwnership (map nat int)))
          }; # list operation : pair (pair (map %agents nat address) (pair (map %bids nat int) (map %ctrs nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
      }; # list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
    NIL operation; # list operation : list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
    SWAP;       # list operation : list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
    ITER
      {
        CONS;       # list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
      }; # list operation : pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int)))
    PAIR;       # pair (list operation) (pair (pair (map nat address) (pair (map nat int) (map nat int))) (pair (bool %isOpen) (pair (address %owner) (map %prices nat int))))
  };
